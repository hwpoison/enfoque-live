user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;
                    
events {
    worker_connections 768;
    # multi_accept on;
}
rtmp {
        server {
                listen 1935;
                chunk_size 4096;
        interleave on;  
        wait_key on;

        # Normal source resolution
                application hls {
                        live on;
                        # record settings
                        # record all;
                        # record_suffix _%H_%M_%S_record.flv;
                        # record_path /mnt/recordings;
                        # exec_record_done ffmpeg -y -i $path -acodec libmp3lame -ar 44100 -ac 1 -vcodec libx264 $dirname/$basename.mp4;

                        # hls
                        hls on;
                        hls_path /tmp/hls;
                        hls_fragment 6s;
                        hls_cleanup off;
                        hls_playlist_length 180m;
                        deny play all;
                        hls_fragment_naming system;
                }
    
        # With transcoding
                application hls_1 {
                        live on;
            hls on;
            exec ffmpeg -i rtmp://127.0.0.1/$app/$name -async 1 -vsync -1
                        -c:v libx264 -c:a aac -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/multi_resolution/$name_low
                        -c:v libx264 -c:a aac -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/multi_resolution/$name_mid
                        -c:v libx264 -c:a aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/multi_resolution/$name_hd720
                        -c copy -f flv rtmp://127.0.0.1/multi_resolution/$name_src;
                }

        # Split in many resolutions
        application multi_resolution {
                live on;    # Allows live input from above
            # hls
            hls on;
            hls_fragment 6s;
            hls_cleanup off;
            hls_playlist_length 80m;
            deny play all;
            hls_fragment_naming system;

            # Pointing this to an SSD is better as this involves lots of IO
            hls_path /tmp/hls/;
                

            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _low BANDWIDTH=424938,AVERAGE-BANDWIDTH=347843,RESOLUTION=480x270; # Low bitrate, sub-SD resolution
            hls_variant _mid BANDWIDTH=448000,AVERAGE-BANDWIDTH=732860,RESOLUTION=720x404; # Medium bitrate, SD resolution
            hls_variant _hd720 BANDWIDTH=2048000,AVERAGE-BANDWIDTH=3187123,RESOLUTION=1280x720; # High bitrate, HD 720p resolution
            hls_variant _src BANDWIDTH=4096000,AVERAGE-BANDWIDTH=3187123,RESOLUTION=1280x720; # Source bitrate, source resolution


        }


        }
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    directio 512;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/octet-stream;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;


    server {
     listen 80;
     server_name futbol.enfoquezonal.com.ar;
     return 301 https://futbol.enfoquezonal.com.ar$request_uri;
    }
    
    # Serve Enfoque-Live app
    server {
        listen 443 ssl;
        server_name futbol.enfoquezonal.com.ar;

        # Enables SSL/TLS encryption
        ssl_certificate /etc/letsencrypt/live/futbol.enfoquezonal.com.ar/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/futbol.enfoquezonal.com.ar/privkey.pem;

        error_page 502 503 @maintenance;
        location @maintenance {
        root /usr/share/nginx/html;
        try_files $uri /under_maintenance.html =503;
        }

        location / {
        if (-f $document_root/under_maintenance.html) {
                   return 503;
                }

        # setup reverse proxy
        proxy_pass http://127.0.0.1:8085/;
        include /etc/nginx/proxy_params;
        proxy_set_header   X-Forwarded-Proto    $scheme;
        add_header ETag $upstream_http_etag;
        proxy_redirect off;
        }
     }

    # Serve static files (fragments)
    server {
        listen 8089;
            default_type application/octet-stream;

            types {
            application/dash+xml mpd;
            application/vnd.apple.mpegurl m3u8;
            video/mp2t ts;
            plain/text key;
         }

        location /thisismyoriginsecret/get {
        if ($request_uri ~* \.m3u8$) {
            expires 5;
            }
        alias /tmp/hls/;
        try_files $uri $uri/ =404;
        }


    }
}
